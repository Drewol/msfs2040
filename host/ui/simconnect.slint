import { ProgressIndicator , Slider} from "std-widgets.slint";
export enum ConnectionStatus {
    Disconnected,
    Warning,
    Connected,
}

component ToolTip {
    width: 100%;
    height: 100%;
    in property <string> text;
    TouchArea {
        Rectangle {
            width: text.width + 1rem;
            height: text.height + 1rem;
            background: #111;
            x: -min(parent.absolute-position.x - 0.5rem, self.width / 2);
            y: parent.absolute-position.y < self.height ? self.height : -0.5rem - self.height;
            drop-shadow-blur: 1rem;
            drop-shadow-color: #0003;
            visible: parent.has-hover;
            text := Text {
                text: root.text;
            }
        }
    }
}

component StatusLight {
    in property <ConnectionStatus> status;
    in property <string> warning-text;

    Rectangle {
        preferred-height: 1rem;
        preferred-width: 1rem;
        width: 1rem;
        height: 1rem;
        background: red;
        border-radius: self.width;
        drop-shadow-color: self.background;
        drop-shadow-blur: 1rem;

        if status == ConnectionStatus.Warning:
            ToolTip {
                text: warning-text;
            }
            

        states [
            ok when status == ConnectionStatus.Connected: {
                background: green;
            }
            warn when status == ConnectionStatus.Warning: {
                background: yellow;
            }
            err when status == ConnectionStatus.Disconnected: {
                background: red;
            }
        ]
    }
}

component StatusIndicator {
    in property <ConnectionStatus> status;
    in property <string> warning-text;
    in property <string> text;
    HorizontalLayout {
        alignment: LayoutAlignment.start;
        spacing: 1rem;
        StatusLight {
            warning-text: warning-text;
            status: status;
        }
        Text {text: text;}
    }
}


export struct DeviceConnection {
    status: ConnectionStatus,
    warning: string,
    name: string,
}

export component SimConnectApp inherits Window {
    in property <ConnectionStatus> sim-connect-status;
    in property <string> connect-warning;
    in property <float> throttle;
    in property <[DeviceConnection]> devices: [{name: "Test"}, {name: "A"}];

    callback throttle_changed(float);
    
    VerticalLayout {
        alignment: LayoutAlignment.start;
        padding: 1rem;
        spacing: 1rem;
        StatusIndicator {
            text: "Simulator Connection";
            status: sim-connect-status;
            warning-text: connect-warning;
        }
        for device in devices: StatusIndicator {
            text: device.name;
            status: device.status;
            warning-text: device.warning;
        }
        Text {text: "Throttle:";}
        Slider { 
            maximum: 100;
            minimum: 0;
            changed => {throttle-changed(self.value)}
        }
      
        ProgressIndicator {
            progress: throttle / 100;
        }

    }
    
}